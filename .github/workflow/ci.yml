name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.13"]
        # Add more versions if needed: ["3.11", "3.12", "3.13"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "uv.lock"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run ruff linter
      run: uv run ruff check .

    - name: Run ruff formatter check
      run: uv run ruff format --check .

    - name: Run type checking with mypy
      run: uv run mypy src/

    - name: Run security check with bandit
      run: uv run bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Run tests with pytest
      run: uv run pytest --cov=src/imageable --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.13'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: bandit-report.json

  lint:
    name: Pre-commit checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run pre-commit
      run: uv run pre-commit run --all-files

  build:
    name: Build distribution
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v4

    - name: Set up Python
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --group dev

    - name: Build package
      run: uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Test installation
      run: |
        uv pip install dist/*.whl
        uv run python -c "import imageable; print('Package installed successfully!')"